name: build

on:
  pull_request:
    branches:
      - master # when ref is master
  push:
    branches:
      - master # when base_ref is master
    tags:
      - '**'

jobs:
  # debug:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Dump github context
  #       env:
  #         GH_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GH_CONTEXT"

  unit-api:
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.modified, 'api/')
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: actions/cache@v1
        id: cache
        with:
          path: ./api/node_modules
          key: api-${{ hashFiles('**/package-lock.json') }}
      - working-directory: ./api
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: tests
        working-directory: ./api
        run: npm run test

  unit-bf:
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.modified, 'botfront/')
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: install meteor
      run: curl https://install.meteor.com/ | sh
    - uses: actions/cache@v1
      id: cache
      with:
        path: ./botfront/node_modules
        key: bf-${{ hashFiles('**/package-lock.json') }}
    - uses: actions/cache@v1
      with:
        path: ~/.cache/Cypress
        key: cypress-${{ hashFiles('**/package.json') }}
    - working-directory: ./botfront
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci # to do: remove cypress from installation
    - name: mocha tests
      working-directory: ./botfront
      run: npm run test-once

  build-api:
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.modified, 'api/') || contains(github.event.head_commit.modified, 'botfront/')
    steps:
      - uses: actions/checkout@v1
      - name: build api image
        run: |
          docker build \
          -t botfront-api-local \
          ./api
      - run: docker save botfront-api-local $(docker history -q botfront-api-local | awk '!/<missing>/{print}') > botfront-api-local.tar
      - uses: actions/upload-artifact@v1
        with:
          name: botfront-api-local
          path: botfront-api-local.tar

  build-bf: # to do: run meteor build in previous step and build from simplified dockerfile
    runs-on: ubuntu-latest
    # if: contains(github.event.head_commit.modified, 'botfront/')
    steps:
      - uses: actions/checkout@v1
      - name: build bf image
        run: |
          docker build \
          -t botfront-local \
          .
      - run: docker save botfront-local $(docker history -q botfront-local | awk '!/<missing>/{print}') > botfront-local.tar
      - uses: actions/upload-artifact@v1
        with:
          name: botfront-local
          path: botfront-local.tar

  integration:
    runs-on: ubuntu-latest
    needs: [build-api, build-bf, unit-bf]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: botfront-api-local
          path: .
      - uses: actions/download-artifact@v1
        with:
          name: botfront-local
          path: .
      - run: docker load < botfront-api-local.tar
      - run: docker load < botfront-local.tar
      - name: cypress tests
        working-directory: ./botfront/cypress
        run: |
          docker-compose up \
          --abort-on-container-exit \
          --exit-code-from e2e
      - name: persist screenshots as artifact
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: screenshots
          path: ./botfront/cypress/screenshots

  push-api:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'master') || contains(github.ref, 'tags'))
    needs: [unit-api, build-api, integration]
    steps:
      - name: log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: download image
        uses: actions/download-artifact@v1
        with:
          name: botfront-api-local
          path: .
      - run: docker load < botfront-api-local.tar
      - name: push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Add branch- prefix for branch pushes
          [[ "${{ github.ref }}" == "refs/heads/"* ]] && VERSION=branch-$VERSION
          echo VERSION=$VERSION
          docker tag botfront-api-local botfront/botfront-api:$VERSION
          docker push botfront/botfront-api:$VERSION

  push-bf:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'master') || contains(github.ref, 'tags'))
    needs: [unit-bf, build-bf, integration]
    steps:
      - name: log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: download image
        uses: actions/download-artifact@v1
        with:
          name: botfront-local
          path: .
      - run: docker load < botfront-local.tar
      - name: push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Add branch- prefix for branch pushes
          [[ "${{ github.ref }}" == "refs/heads/"* ]] && VERSION=branch-$VERSION
          echo VERSION=$VERSION
          docker tag botfront-local botfront/botfront:$VERSION
          docker push botfront/botfront:$VERSION
  
  create-github-release:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    needs: [push-bf]
    steps:
      - uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
      # - uses: actions/checkout@v1
      # - name: npm publish
      #   run: |
      #     npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
      #     npm run trypublish
      #   env:
      #     CI: true
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  create-npm-release:
    runs-on: ubuntu-latest
    needs: [create-github-release]
    steps:
      - uses: actions/checkout@v1
      - name: npm publish
        working-directory: ./cli
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm publish
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-netlify-docs:
    runs-on: ubuntu-latest
    needs: [create-github-release]
    steps:
      - run: echo "https://api.netlify.com/build_hooks/${{ secrets.NETLIFY_HOOK }}" | xargs curl -X POST -d {}